#!/bin/bash

# =================================================================
#            Website Availability Monitor v1.1
#                  (with Email Alerting)
# =================================================================

# --- Configuration ---
CONFIG_FILE="websites.conf"
LOG_FILE="logs/monitor.log"
ENV_FILE=".env" # NEW: Define the .env file

# --- Load Environment Variables --- # NEW SECTION
if [ -f "${ENV_FILE}" ]; then
    export $(grep -v '^#' ${ENV_FILE} | xargs)
else
    echo "Error: .env file not found at ${ENV_FILE}"
    exit 1
fi

# --- Functions ---

# Function to log messages with a timestamp
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "${LOG_FILE}"
}

# NEW: Function to send an email alert
send_email_alert() {
    local url=$1
    local reason=$2
    local subject="⚠️ Website Down Alert: ${url}"
    local body="The website ${url} is currently down.

Reason: ${reason}
Timestamp: $(date '+%Y-%m-%d %H:%M:%S')

Please investigate the issue.
"
    # Use the 'mail' command to send the email
    echo "${body}" | mail -s "${subject}" "${EMAIL_TO}"
    log "ALERT: Email alert sent to ${EMAIL_TO} for ${url}."
}

# NEW: Central function to handle sending alerts based on ALERT_METHOD
send_alert() {
    local url=$1
    local reason=$2

    case "${ALERT_METHOD}" in
        "email")
            send_email_alert "$url" "$reason"
            ;;
        "log")
            # For 'log' method, we just log it as a critical failure
            log "ALERT_TRIGGERED (method=log): ${url} is DOWN. Reason: ${reason}"
            ;;
        *)
            log "WARNING: Unknown ALERT_METHOD '${ALERT_METHOD}'. Defaulting to log."
            log "ALERT_TRIGGERED (method=log): ${url} is DOWN. Reason: ${reason}"
            ;;
    esac
}


# Function to check a single website
check_site() {
    local url=$1
    
    http_code=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 10 "${url}")
    curl_exit_code=$?

    if [ $curl_exit_code -ne 0 ]; then
        log "ERROR: Failed to connect to ${url}. cURL exit code: ${curl_exit_code}."
        # MODIFIED: Call the central alert function
        send_alert "${url}" "Connection Error. cURL exit code: ${curl_exit_code}."
        echo "Site ${url} is DOWN (Connection Error)."
    elif [ "${http_code}" -ge 200 ] && [ "${http_code}" -lt 400 ]; then
        log "SUCCESS: ${url} is UP. Status code: ${http_code}."
        echo "Site ${url} is UP."
    else
        log "FAILURE: ${url} is DOWN. Status code: ${http_code}."
        # MODIFIED: Call the central alert function
        send_alert "${url}" "HTTP Status Code: ${http_code}."
        echo "Site ${url} is DOWN (HTTP ${http_code})."
    fi
}

# --- Main Script Logic ---

# Check if the configuration file exists
if [ ! -f "${CONFIG_FILE}" ]; then
    echo "Error: Configuration file not found at ${CONFIG_FILE}"
    exit 1
fi

log "--- Monitor script started ---"

# Read each line from the config file and check the site
while IFS= read -r site || [[ -n "$site" ]]; do
    if [[ -n "$site" ]]; then # Ensure the line is not empty
        check_site "$site"
    fi
done < "${CONFIG_FILE}"

log "--- Monitor script finished ---"
